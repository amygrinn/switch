@use 'sass:string';
@use 'sass:list';

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function str-split($string, $sep) {
  $i: str-index($string, $sep);

  @if $i {
    $head: str-slice($string, 1, $i - 1);
    $tail: str-slice($string, $i + 1);

    @return join($head, str-split($tail, $sep));
  }

  @return ($string);
}

@function list-slice($list, $start: 1, $end: length($list)) {
  $result: [];

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

/*
 * Generate partial paths from a '/' separated path
 * ie:
 *   tokens = '/super/long/path'.split('/')
 *   partials(tokens) -> ['/super', '/super/long', '/super/long/path']
 */
@function partials($tokens, $acc: []) {
  @if length($tokens) < 1 {
    @return $acc;
  }

  $firstToken: nth($tokens, 1);
  $tailTokens: [];

  @if length($tokens) > 1 {
    $tailTokens: list-slice($tokens, 2);
  }

  @if length($acc) < 1 {
    @return partials($tailTokens, ($firstToken));
  }

  $lastPartial: nth($acc, length($acc));
  $acc: append($acc, '#{$lastPartial}/#{$firstToken}');

  @return partials($tailTokens, $acc);
}
