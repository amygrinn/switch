@use 'sass:meta';
@use 'sass:list';

@use 'util' as *;

/**
 * @param {string} $name The name of the switch
 * @param {...string} $states A list of states the switch can be in
 *
 * Optionally pass content to the mixin that will be applied when a state is not active
 * By default, this is `display: none; pointer-events: none;`
 */
@mixin switch($name, $states...) {
  @each $state in $states {
    $partialSelectors: '';
    $tokens: str-split($state, '/');
    @if length($tokens) > 2 {
      $partials: partials(list-slice($tokens, 2));
      @each $partial in $partials {
        $partialSelectors: "#{$partialSelectors}:not([data-#{$name}~='^#{$partial}'])";
      }
    }

    &[data-#{$name}-state='#{$state}'] {
      /**
       * Hide any elements with the data-$name attribute that has the '!$state' exclusionary syntax
       * in its value
       */
      [data-#{$name}~='!#{$state}'],

      /**
       * If any elements with the data-$name attribute does not have $state in its value, nor is
       * the value using the exclusionary syntax, then hide it
       */
      [data-#{$name}]:not([data-#{$name}~='#{$state}']):not([data-#{$name}*='!']):not([data-#{$name}*='~'])#{$partialSelectors} {
        @if (content-exists()) {
          // Let mixin consumer override default inactive state styles
          @content;
        } @else {
          display: none;
          pointer-events: none;
        }
      }
    }
  }
}

/**
 * @param {string} $name The name of the switch
 * @param {...string} $states A list of states for which the given styles should be applied
 */
@mixin switchChild($name, $states...) {
  $selectors: '';
  @each $state in $states {
    $selectors: $selectors + "[data-#{$name}-state='#{$state}'] &,";
  }

  @if $selectors != '' {
    #{$selectors} {
      @content;
    }
  }
}
