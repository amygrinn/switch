@use 'sass:meta';
@use 'sass:list';
@use 'sass:selector';

@use 'util' as *;

/**
 * @param {string} $name The name of the switch
 * @param {...string} $states A list of states the switch can be in
 *
 * Optionally pass content to the mixin that will be applied when a state is not active
 * By default, this is `display: none; pointer-events: none;`
 */
@mixin switch($name, $states...) {
  $baseFinalSelector: selector-append(
    '[data-#{$name}]',
    ":not([data-#{$name}*='!'])"
  );

  @each $state in $states {
    $exclusionSelectors: "[data-#{$name}~='!#{$state}'],";

    $finalSelector: selector-append(
      $baseFinalSelector,
      ":not([data-#{$name}~='#{$state}'])"
    );

    $tokens: str-split($state, '/');

    @if length($tokens) > 1 and nth($tokens, 1) == '' {
      // State has a leading forward slash that was split to the first token
      // Remove the first tokena and add the forward slash to the new first token
      $tokens: list-slice($tokens, 2);
      $tokens: set-nth($tokens, 1, '/#{nth($tokens, 1)}');
    }

    $partials: partials($tokens);
    @each $partial in $partials {
      $finalSelector: selector.append(
        $finalSelector,
        ":not([data-#{$name}~='^#{$partial}'])"
      );

      $exclusionSelectors: $exclusionSelectors +
        "[data-#{$name}~='!^#{$partial}'],";
    }

    &[data-#{$name}-state='#{$state}'] {
      /**
       * Hide any elements with the data-$name attribute that has the '!$state' exclusionary syntax
       * in its value
       */
      #{$exclusionSelectors}

      /**
       * If any elements with the data-$name attribute does not have $state in its value, nor is
       * the value using the exclusionary syntax, then hide it
       */
      #{$finalSelector} {
        @if (content-exists()) {
          // Let mixin consumer override default inactive state styles
          @content;
        } @else {
          display: none;
          pointer-events: none;
        }
      }
    }
  }
}

/**
 * @param {string} $name The name of the switch
 * @param {...string} $states A list of states for which the given styles should be applied
 */
@mixin switchChild($name, $states...) {
  $selectors: '';
  @each $state in $states {
    $selectors: $selectors + "[data-#{$name}-state='#{$state}'] &,";
  }

  @if $selectors != '' {
    #{$selectors} {
      @content;
    }
  }
}
